Pour view, update, delete... veerifier que l'id est du type ObjectId
Liaison dans les collections, type ObjectId avec ref sur la collection

template Reactjs

package ip (ip localisation)

mongoose autoincrement
npm install mongoose-auto-increment

model books
// Implémentation d'un middleware mongoose
BookSchema.pre("save", function(next) {
    // Vérifier si le couple author|title est unique 
    // try {
    //     book = await Books.find({ title: req.params.title, author: req.params.author })
    //     if (book == null) return sendJson(res, 404, "Can't find the book");
    // } catch (err) {
    //     return sendJson(res, 404, err);
    // }

    // res.book = book;
    // const self = this;
    // try {
    //     // const book = self.constructor.find({ title: self.title, author: self.author });
    //     const book = mongoose.model('Books', BookSchema).find({ title: self.title, author: self.author }, function(err, book) {
    //         console.log(book);
    //         if (book) {
    //             callback("Can't create this book");
    //         }
    //         next(callback);
    //     });

    // } catch (err) {
    //     // console.log(err);
    //     return err;
    // }

    // if (!book.isNew || !book.isModified) next("dfdsfdsfsf");
    const book = this;
    // console.log(book);
    console.log(book.isNew);
    if (!book.isNew) return "Something went wrong !";
    next();
});

// Books.create(dataBook).then(book => {
    //     return sendJson(res, 200, books);
    // }).catch(err => {
    //     return sendJson(res, 500, err);
    // });

 // Books.deleteMany({}, function(err) {
    //     return (err) ? sendJson(res, 500, err) : sendJson(res, 200, "Clear collection books");
    // });

// Books.findOneAndDelete({ id: req.params.id }, function(err, book) {
    //     return (err) ? sendJson(res, 500, err) : (book.length < 1) ? sendJson(res, 402, "Book not found") : sendJson(res, 200, "Book removed");
    // });

// Books.find({ id: req.params.id }, function(err, book) {
    //     return (err) ? sendJson(res, 500, err) : (book.length < 1) ? sendJson(res, 402, "Book not found") : sendJson(res, 200, book);
    // });

// Create Book
exports.saveBook = (req, res) => {
    // Il faut valider les données utilisateur
    let book = new Books();
    book.title = req.body.title;
    book.author = req.body.author;
    book.publishedDate = new Date();
    book.save(function(data) {
        res.status(201).send(JSON.stringify(req.body));
    });
};

// Routes for resource Books
// router.get('/list', booksController.listBooks);
// router.post('/add', booksController.saveBook);
